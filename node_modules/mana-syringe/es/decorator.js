function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable @typescript-eslint/no-explicit-any */
import { injectable as inversInjectable, inject as inversifyInject, named as inversifyNamed } from 'inversify';
import { Syringe } from './core';
import { namedToIdentifier, tokenToIdentifier } from './inversify';
export function injectable() {
  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var decorator = inversInjectable();
  return function (target) {
    Reflect.defineMetadata(Syringe.ClassOptionSymbol, _objectSpread(_objectSpread({}, option), {}, {
      target: target
    }), target);
    decorator(target);
  };
}
export function singleton() {
  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return injectable(_objectSpread(_objectSpread({}, option), {}, {
    lifecycle: Syringe.Lifecycle.singleton
  }));
}
export function transient() {
  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return injectable(_objectSpread(_objectSpread({}, option), {}, {
    lifecycle: Syringe.Lifecycle.transient
  }));
}
export function inject(token) {
  return inversifyInject(tokenToIdentifier(token));
}
export function named(name) {
  return inversifyNamed(namedToIdentifier(name));
}
export { postConstruct, optional, unmanaged, decorate } from 'inversify';
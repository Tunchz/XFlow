"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "decorate", {
  enumerable: true,
  get: function get() {
    return _inversify.decorate;
  }
});
exports.inject = inject;
exports.injectable = injectable;
exports.named = named;
Object.defineProperty(exports, "optional", {
  enumerable: true,
  get: function get() {
    return _inversify.optional;
  }
});
Object.defineProperty(exports, "postConstruct", {
  enumerable: true,
  get: function get() {
    return _inversify.postConstruct;
  }
});
exports.singleton = singleton;
exports.transient = transient;
Object.defineProperty(exports, "unmanaged", {
  enumerable: true,
  get: function get() {
    return _inversify.unmanaged;
  }
});

var _inversify = require("inversify");

var _core = require("./core");

var _inversify2 = require("./inversify");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function injectable() {
  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var decorator = (0, _inversify.injectable)();
  return function (target) {
    Reflect.defineMetadata(_core.Syringe.ClassOptionSymbol, _objectSpread(_objectSpread({}, option), {}, {
      target: target
    }), target);
    decorator(target);
  };
}

function singleton() {
  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return injectable(_objectSpread(_objectSpread({}, option), {}, {
    lifecycle: _core.Syringe.Lifecycle.singleton
  }));
}

function transient() {
  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return injectable(_objectSpread(_objectSpread({}, option), {}, {
    lifecycle: _core.Syringe.Lifecycle.transient
  }));
}

function inject(token) {
  return (0, _inversify.inject)((0, _inversify2.tokenToIdentifier)(token));
}

function named(name) {
  return (0, _inversify.named)((0, _inversify2.namedToIdentifier)(name));
}